---

- name: Create jenkins group for CI jobs to publish the website
  group: name=jenkins state=present gid=1001
- name: Create jenkins user for CI jobs to publish the website
  user: name=jenkins comment="Jenkins user" shell=/bin/bash state=present uid=1001 password_lock=true
- name: Ensure /home/jenkins/.ssh exists
  file: path=/home/jenkins/.ssh state=directory mode=0700 owner=jenkins group=jenkins
- name: Authorize an SSH keys for CI jobs to publish the website
  copy: src=authorized_keys dest=/home/jenkins/.ssh/authorized_keys mode=0600 owner=jenkins group=jenkins
  tags:
    - jenkins

# https://certbot.eff.org/lets-encrypt/centosrhel8-apache.html
# https://snapcraft.io/docs/installing-snap-on-red-hat
# https://fedoraproject.org/wiki/EPEL
- name: Enable Extra Packages for Enterprise Linux
  dnf:
    name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
    state: latest
    # We're installing the package that contains the keys, so obviously we don't have them yet.
    # We're using HTTPS to retrieve the package, so this should be safe anyway.
    disable_gpg_check: true

- name: Install the latest version of Apache HTTPD, snapd, podman, using dnf
  dnf:
    name: ['httpd', 'mod_ssl', 'snapd', 'podman']
    state: latest

- name: Enable snapd's socket
  systemd:
    name: snapd.socket
    state: started
    enabled: yes

- name: Enable classic snap support
  file: src='/var/lib/snapd/snap' dest='/snap' state=link

# Necessary for reverse proxies
- name: Allow HTTPD to open connections
  ansible.posix.seboolean:
    name: httpd_can_network_connect
    state: yes
    persistent: yes

- name: Make sure the example welcome page from HTTPD is removed
  file: path=/etc/httpd/conf.d/{{ item }} state=absent
  with_items:
    - autoindex.conf
    - userdir.conf
    - welcome.conf

- name: Create httpd home for in.relation.to
  file: path=/var/www/in.relation.to owner=jenkins group=jenkins mode=0755 state=directory

- name: Create httpd home for staging.in.relation.to
  file: path=/var/www/staging-in.relation.to owner=jenkins group=jenkins mode=0755 state=directory
  tags: staging

- name: Create httpd home for hibernate.org
  file: path=/var/www/hibernate.org owner=jenkins group=jenkins mode=0755 state=directory

- name: Create httpd home for staging.hibernate.org
  file: path=/var/www/staging-hibernate.org owner=jenkins group=jenkins mode=0755 state=directory
  tags: staging

- name: Create httpd home for staging.beanvalidation.org
  file: path=/var/www/staging-beanvalidation.org owner=jenkins group=jenkins mode=0755 state=directory
  tags: staging

- name: Add a minimal, default index.html (in.relation.to)
  copy: src=var/www/in.relation.to/basic-index.html dest=/var/www/in.relation.to/index.html owner=jenkins group=jenkins mode=0666 force=no

- name: Add a minimal, default index.html (staging.in.relation.to)
  copy: src=var/www/staging-in.relation.to/basic-index.html dest=/var/www/staging-in.relation.to/index.html owner=jenkins group=jenkins mode=0666 force=no
  tags: staging

- name: Add a minimal, default index.html (hibernate.org)
  copy: src=var/www/hibernate.org/basic-index.html dest=/var/www/hibernate.org/index.html owner=jenkins group=jenkins mode=0666 force=no

- name: Add a minimal, default index.html (staging.hibernate.org)
  copy: src=var/www/staging-hibernate.org/basic-index.html dest=/var/www/staging-hibernate.org/index.html owner=jenkins group=jenkins mode=0666 force=no

- name: Add a minimal, default index.html (staging.beanvalidation.org)
  copy: src=var/www/staging-beanvalidation.org/basic-index.html dest=/var/www/staging-hibernate.org/index.html owner=jenkins group=jenkins mode=0666 force=no
  tags: staging

- name: Add custom HTTPD configuration for *.in.hibernate.org
  copy: src={{ item }} dest=/etc/httpd/conf.d/ mode=0600 owner=root
  with_fileglob:
    - "etc/httpd/origin.in.relation.to.conf"
    - "etc/httpd/in.relation.to.conf"
    - "etc/httpd/in.relation.to-*.confpart"
    - "etc/httpd/staging-in.relation.to.conf"
  notify:
    - Restart Apache HTTPD

- name: Add custom HTTPD configuration for *.hibernate.org
  copy: src={{ item }} dest=/etc/httpd/conf.d/ mode=0600 owner=root
  with_fileglob:
    - "etc/httpd/origin.hibernate.org.conf"
    - "etc/httpd/hibernate.org.conf"
    - "etc/httpd/hibernate.org-*.confpart"
    - "etc/httpd/staging-hibernate.org.conf"
    - "etc/httpd/www.hibernate.org.conf"
    - "etc/httpd/blog.hibernate.org.conf"
    - "etc/httpd/infra.hibernate.org.conf"
  notify:
    - Restart Apache HTTPD

- name: Add custom HTTPD configuration (staging.beanvalidation.org)
  copy: src=etc/httpd/staging-beanvalidation.org.conf dest=/etc/httpd/conf.d/staging-beanvalidation.org.conf mode=0600 owner=root
  tags: staging
  notify:
    - Restart Apache HTTPD

- name: Install the latest version of Let's Encrypt's "certbot", using snapd
  community.general.snap:
    name: certbot
    # No sandboxing in certbox.
    classic: yes

- name: Put the certbot command into the path
  file: src='/snap/bin/certbot' dest='/usr/bin/certbot' state=link

- name: Obtain certificates for in.relation.to using Let's Encrypt
  shell: sudo certbot certonly -m admin+inrelationto@hibernate.org --agree-tos --apache -d in.relation.to
  args:
    creates: /etc/letsencrypt/live/in.relation.to
  notify:
    - Restart Apache HTTPD

- name: Obtain certificates for origin.in.relation.to using Let's Encrypt
  shell: sudo certbot certonly -m admin+inrelationto@hibernate.org --agree-tos --apache -d origin.in.relation.to
  args:
    creates: /etc/letsencrypt/live/origin.in.relation.to
  notify:
    - Restart Apache HTTPD

- name: Obtain certificates for staging.in.relation.to using Let's Encrypt
  shell: sudo certbot certonly -m admin+inrelationto@hibernate.org --agree-tos --apache -d staging.in.relation.to
  args:
    creates: /etc/letsencrypt/live/staging.in.relation.to
  notify:
    - Restart Apache HTTPD

- name: Obtain certificates for hibernate.org using Let's Encrypt
  shell: sudo certbot certonly -m admin+hibernateorg@hibernate.org --agree-tos --apache -d hibernate.org
  args:
    creates: /etc/letsencrypt/live/hibernate.org
  notify:
    - Restart Apache HTTPD

- name: Obtain certificates for origin.hibernate.org using Let's Encrypt
  shell: sudo certbot certonly -m admin+hibernateorg@hibernate.org --agree-tos --apache -d origin.hibernate.org
  args:
    creates: /etc/letsencrypt/live/origin.hibernate.org
  notify:
    - Restart Apache HTTPD

- name: Obtain certificates for staging.hibernate.org using Let's Encrypt
  shell: sudo certbot certonly -m admin+hibernateorg@hibernate.org --agree-tos --apache -d staging.hibernate.org
  args:
    creates: /etc/letsencrypt/live/staging.hibernate.org
  notify:
    - Restart Apache HTTPD

- name: Obtain certificates for www.hibernate.org using Let's Encrypt
  shell: sudo certbot certonly -m admin+hibernateorg@hibernate.org --agree-tos --apache -d www.hibernate.org
  args:
    creates: /etc/letsencrypt/live/www.hibernate.org
  notify:
    - Restart Apache HTTPD

- name: Obtain certificates for blog.hibernate.org using Let's Encrypt
  shell: sudo certbot certonly -m admin+inrelationto@hibernate.org --agree-tos --apache -d blog.hibernate.org
  args:
    creates: /etc/letsencrypt/live/blog.hibernate.org
  notify:
    - Restart Apache HTTPD

- name: Obtain certificates for infra.hibernate.org using Let's Encrypt
  shell: sudo certbot certonly --apache -d infra.hibernate.org
  args:
    creates: /etc/letsencrypt/live/infra.hibernate.org
  notify:
    - Restart Apache HTTPD

- name: Ensure Let's encrypt certificates get renewed
  cron:
    name: "Renew let's encrypt certificates"
    minute: "0"
    hour: "0,12"
    job: "python -c 'import random; import time; time.sleep(random.random() * 3600)' && certbot renew"

- name: Ensure Apache HTTPD is started now, and again on startup
  service: name=httpd enabled=yes state=started
  tags:
    - staging
